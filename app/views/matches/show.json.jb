def match_combatant_moves(match_combatant)
  return [] unless match_combatant.player == @player

  match_combatant.match_combatants_moves.map do |match_combatants_move|
    move = match_combatants_move.move
    {
      id: match_combatants_move.id.to_s,
      description: move.description,
      energyCost: move.energy_cost,
      isDiagonal: move.is_diagonal,
      name: move.name,
      range: move.range
    }
  end
end

def match_combatant_status(match_combatant)
  status = match_combatant.status

  if match_combatant.player == @player
    return {
      defense: status.defense,
      maximum_health: status.maximum_health,
      remaining_health: status.remaining_health,
      status_effects: []
    }
  end

  {
    remaining_health_percentage: 100,
    status_effects: []
  }
end


board = { }
board[:positions] =
  @match.board.positions.map do |position|
    {
      id: position.id.to_s,
      x: position.x,
      y: position.y
    }
  end

combatants =
  @match.match_combatants.map do |match_combatant|
    {
      id: match_combatant.id.to_s,
      moves: match_combatant_moves(match_combatant),
      name: match_combatant.combatant.name,
      playerId: match_combatant.player_combatant.player_id.to_s,
      status: match_combatant_status(match_combatant),
      updatedAt: match_combatant.updated_at
    }
  end

events =
  @match.events.order('id ASC').map do |event|
    {
      id: event.id.to_s,
      amount: event.amount,
      boardPositionId: event.board_position_id.to_s,
      createdAt: event.created_at,
      description: "",
      category: event.category,
      matchCombatantId: event.match_combatant_id.to_s,
      turn: event.match_turn.turn
    }
  end

players =
  @match.players.map do |player|
    {
      id: player.id.to_s,
      name: player.name
    }
  end

match = {
  id: @match.id.to_s,
  board: board,
  combatants: combatants,
  events: events,
  players: players,
  turn: @match.turn.turn
}

{ match: match }
